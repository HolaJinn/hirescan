generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model User {
  id              String           @id @default(cuid())
  firstName       String?
  lastName        String?
  email           String?          @unique
  verified        Boolean          @default(false)
  password        String?
  image           String?
  accounts        Account[]
  sessions        Session[]
  role            String           @default("recruiter") // can be 'admin' or 'recruiter'
  jobDescriptions JobDescription[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model JobDescription {
  id          String   @id @default(cuid())
  title       String
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  resumes     Resume[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Resume {
  id            String         @id @default(cuid())
  job           JobDescription @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId         String
  fileUrl       String // URL/path to the uploaded file
  rawText       String? // Parsed text content from the resume
  candidateName String? // Optional: Extracted from resume content
  email         String? // Optional: Extracted if possible
  linkedinUrl   String? // Optional: Extracted if found
  matchScore    Float? // To be computed after AI scoring
  aiSummary     String? // Optional AI-generated summary or explanation
  uploadedAt    DateTime       @default(now())
}
